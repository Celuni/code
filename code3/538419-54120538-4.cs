        namespace EFExtensions
        {
            /// <summary>
            /// Implement DefaultValue constraint definition in Migration Scripts.
            /// </summary>
            /// <remarks>
            /// Original guide that provided inspiration for this https://romiller.com/2012/11/30/code-first-migrations-customizing-scaffolded-code/
            /// </remarks>
            public class CustomCodeGenerator : System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator
            {
                /// <summary>
                /// Inject Default values from the DefaultValue attribute, if the DefaultValueConvention has been enabled.
                /// </summary>
                /// <seealso cref="DefaultValueConvention"/>
                /// <param name="column"></param>
                /// <param name="writer"></param>
                /// <param name="emitName"></param>
                protected override void Generate(ColumnModel column, IndentedTextWriter writer, bool emitName = false)
                {
                    var annotations = column.Annotations?.ToList();
                    if (annotations != null && annotations.Any())
                    {
                        for (int index = 0; index < annotations.Count; index ++)
                        {
                            var annotation = annotations[index];
                            bool handled = true;
                            try
                            {
                                switch (annotation.Key)
                                {
                                    case DefaultValueConvention.SqlValueAnnotationKey:
                                        if (annotation.Value?.NewValue != null)
                                        {
                                            column.DefaultValueSql = $"{annotation.Value.NewValue}";
                                        }
                                        break;
                                    case DefaultValueConvention.DirectValueAnnotationKey:
                                        if (annotation.Value?.NewValue != null)
                                        {
                                            column.DefaultValue = Convert.ChangeType(annotation.Value.NewValue, column.ClrType);
                                        }
                                        break;
                                    default:
                                        handled = false;
                                        break;
                                }
                            }
                            catch(Exception ex)
                            {
                                // re-throw with specific debug information
                                throw new ApplicationException($"Failed to Implement Column Annotation for column: {column.Name} with key: {annotation.Key} and new value: {annotation.Value.NewValue}", ex);
                            }
                            if(handled)
                            {
                                // remove the annotation, it has been applied
                                column.Annotations.Remove(annotation.Key);
                            }
                        }
                    }
                    base.Generate(column, writer, emitName);
                }
                /// <summary>
                /// Generates class summary comments and default attributes
                /// </summary>
                /// <param name="writer"> Text writer to add the generated code to. </param>
                /// <param name="designer"> A value indicating if this class is being generated for a code-behind file. </param>
                protected override void WriteClassAttributes(IndentedTextWriter writer, bool designer)
                {
                    writer.WriteLine("/// <summary>");
                    writer.WriteLine("/// Definition of the Migration: {0}", this.ClassName);
                    writer.WriteLine("/// </summary>");
                    writer.WriteLine("/// <remarks>");
                    writer.WriteLine("/// Generated Time: {0}", DateTime.Now);
                    writer.WriteLine("/// Generated By: {0}", Environment.UserName);
                    writer.WriteLine("/// </remarks>");
                    base.WriteClassAttributes(writer, designer);
                }
            }
        }
