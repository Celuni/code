                /// <summary>
		/// By default, wkHtmlToPdf leaves pdf form fields as being "Visible but not printable". Using iTextSharp we will change them to being "Visible".
		/// </summary>
		private string MakePdfFormFieldsEditable(string inputFilename)
		{
			var outputFilename = CreateTempPdfFilename();
			var pdfReader = new PdfReader(inputFilename);
			var checkedCheckBoxNames = new List<string>();
			
			using (var outputStream = new FileStream(outputFilename, FileMode.OpenOrCreate))
			{
				var stamper = new PdfStamper(pdfReader, outputStream);
				// Regenarating all the fileds using itextSharp. 
				// Since wkHtmltoPdf has differnt default settings for pdf form fields (Visible and not Printable)
				var formFields = stamper.AcroFields;
				var filedNames = formFields.Fields.Keys;
				var removableFiledNames = new List<string>();
				foreach (var keyName in filedNames)
				{
					if (formFields.GetFieldType(keyName).Equals(AcroFields.FIELD_TYPE_CHECKBOX))
					{
						// Since check boxes generated by WKHtmltoPdf is crapy and click behaviour is annoying
 						// we are replacing it with new checkbox
						var item = formFields.GetFieldItem(keyName);
						// Return "/yes" if it's checked
						var appearance = item.GetValue(0).Get(PdfName.AS);
						// Holds current page number information and Location on the page (Rectangle Dimentions)
						var position = formFields.GetFieldPositions(keyName);
						
						var newCheckBoxFieldname = CreateNewCheckBox(position, stamper, keyName);
						// set newly created check box value
						if (appearance != null && appearance.ToString().ToLower().Equals("/yes"))
						{
							checkedCheckBoxNames.Add(newCheckBoxFieldname);
						}
						// List of Check Box field names to be removed
						removableFiledNames.Add(keyName);
					}
					else
					{
						formFields.SetFieldProperty(keyName, "setflags", PdfAnnotation.FLAGS_PRINT, null);
						formFields.SetFieldProperty(keyName, "setflags", PdfFormField.FF_EDIT, null);
						formFields.SetFieldProperty(keyName, "textsize", 8.0f, null);
						formFields.RegenerateField(keyName);
					}
				}
				// Removing check boxes generaed with WkHtmlToPdf
				foreach (var oldCheckBox in removableFiledNames)
				{
					formFields.RemoveField(oldCheckBox);
				}
				stamper.Close();
			}
			return checkedCheckBoxNames.Any() ? UpdateCheckBoxes(outputFilename, checkedCheckBoxNames) : outputFilename;
		}
		/// <summary>
		/// Updating Check Boxe's status checked or not in input file
		/// </summary>
		private string UpdateCheckBoxes(string inputFilename, ICollection<string> checkedCheckBoxNames)
		{
			var outputFilename = CreateTempPdfFilename();
			var pdfReader = new PdfReader(inputFilename);
			using (var outputStream = new FileStream(outputFilename, FileMode.OpenOrCreate))
			{
				var stamper = new PdfStamper(pdfReader, outputStream);
				var newformFields = stamper.AcroFields;
				var newfiledNames = newformFields.Fields.Keys;
				foreach (var keyName in newfiledNames)
				{
					if (!newformFields.GetFieldType(keyName).Equals(AcroFields.FIELD_TYPE_CHECKBOX)) continue;
					if (!checkedCheckBoxNames.Contains(keyName)) continue;
					newformFields.SetField(keyName, "On");
				}
				stamper.Close();
			}
			return outputFilename;
		}
		/// <summary>
		/// Constructing new check box
		/// </summary>
		/// <param name="fieldPosition"></param>
		/// <param name="stamper"></param>
		/// <param name="keyName"></param>
		/// <returns>new field name</returns>
		private string CreateNewCheckBox(IList<AcroFields.FieldPosition> fieldPosition, PdfStamper stamper, string keyName)
		{
			var pageNumber = fieldPosition.First().page;
			var locationRectangle = fieldPosition.First().position;
			PdfContentByte canvas = stamper.GetOverContent(1);
			// Create array with two appearances
			var onOff = new PdfAppearance[2];
			onOff[0] = canvas.CreateAppearance(15, 15);
			onOff[0].Rectangle(1, 1, 13, 13);
			onOff[0].Stroke();
			onOff[1] = canvas.CreateAppearance(15, 15);
			onOff[1].SetRGBColorFill(255, 128, 128);
			onOff[1].Rectangle(1, 1, 13, 13);
			onOff[1].FillStroke();
			onOff[1].MoveTo(1, 1);
			onOff[1].LineTo(14, 14);
			onOff[1].MoveTo(1, 14);
			onOff[1].LineTo(14, 1);
			onOff[1].Stroke();
			var newFieldName = keyName + "_G";
			// Creates new check boxes
			var checkbox = new RadioCheckField(stamper.Writer, locationRectangle, newFieldName, "On");
			
			var field = checkbox.CheckField;
			// Add check box field to writer
			stamper.AddAnnotation(field, pageNumber);
			return newFieldName;
		}
