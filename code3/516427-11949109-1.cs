    var studentTests = session.CreateCriteria<StudentTestReport>("test")
        .Add(Subqueries.PropertyEq("Date", DetachedCriteria.For<StudentTestReport>()
            .Add(Restrictions.EqProperty("Student", "test.Student"))
            .SetProjection(Projections.Max("lastTest.Date"))))
        .CreateAlias("Student", "student")
        .SetProjection(Projections.ProjectionList()
            .Add(Projections.Property("TestName"), "TestName")
            .Add(Projections.Property("Date"), "Date")
            .Add(Projections.Property("Correct"), "Correct")
            .Add(Projections.Property("Incorrect"), "Incorrect")
            .Add(Projections.Property("Unanswerd"), "Unanswerd")
            .Add(Projections.Property("student.Id"), "Id")
            .Add(Projections.Property("student.Name"), "Person"))
        .SetResultTransformer(Transformers.AliasToBean<TestOverviewWrapper>())
        .Future<TestOverviewWrapper>();
    var studentsWithoutTests = session.CreateCriteria<Student>("student")
        .Add(Subqueries.NotExists(DetachedCriteria.For<StudentTestReport>()
            .Add(Restrictions.EqProperty("Student", "student"))))
        .SetProjection(Projections.ProjectionList()
            .Add(Projections.Property("Id"), "Id")
            .Add(Projections.Property("Name"), "Person"))
        .SetResultTransformer(Transformers.AliasToBean<TestOverviewWrapper>())
        .Future<TestOverviewWrapper>();
    var teacherTests = session.CreateCriteria<TeacherTestReport>("test")
        .Add(Subqueries.PropertyEq("Date", DetachedCriteria.For<TeacherTestReport>()
            .Add(Restrictions.EqProperty("Teacher", "test.Teacher"))
            .SetProjection(Projections.Max("lastTest.Date"))))
        .CreateAlias("Teacher", "teacher")
        .SetProjection(Projections.ProjectionList()
            .Add(Projections.Property("TestName"), "TestName")
            .Add(Projections.Property("Date"), "Date")
            .Add(Projections.Property("Correct"), "Correct")
            .Add(Projections.Property("Incorrect"), "Incorrect")
            .Add(Projections.Property("Unanswerd"), "Unanswerd")
            .Add(Projections.Property("teacher.Id"), "Id")
            .Add(Projections.Property("teacher.EmployeeNr"), "Person"))
        .SetResultTransformer(Transformers.AliasToBean<TestOverviewWrapper>())
        .Future<TestOverviewWrapper>();
    var teacherWithoutTests = session.CreateCriteria<Teacher>("teacher")
        .Add(Subqueries.NotExists(DetachedCriteria.For<TeacherTestReport>()
            .Add(Restrictions.EqProperty("Teacher", "teacher"))))
        .SetProjection(Projections.ProjectionList()
            .Add(Projections.Property("Id"), "Id")
            .Add(Projections.Property("EmployeeNr"), "Person"))
        .SetResultTransformer(Transformers.AliasToBean<TestOverviewWrapper>())
        .Future<TestOverviewWrapper>();
    return studentTests.Concat(studentsWithoutTests).Concat(teacherTests).Concat(teacherWithoutTests);
