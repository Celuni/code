    // An AdapterFactory is a class that given a type T, will construct a derived class (generated by AdapterCompiler)
    // and call its constructor
    //
    public class AdapterFactory<T>
    {
        private Type _adaptedType, _targetType;
        public AdapterFactory(Type adaptedType, Type targetType)
        {
            _adaptedType = adaptedType;
            _targetType = targetType;
        }
        public T Construct(object[] arguments)
        {
            // get the constructor
            ConstructorInfo ci = _adaptedType.GetConstructor(new Type[] { typeof(Type), typeof(Type[]), typeof(object[]) });
            
            // invoke it
            Type[] argTypes = GetArgTypes(arguments);
            return (T)ci.Invoke(new object[] { _targetType, argTypes, arguments });
        }
        private Type[] GetArgTypes(object[] objs)
        {
            Type[] types = new Type[objs.Length];
            for (int i = 0; i < types.Length; i++)
            {
                types[i] = objs[i].GetType();
            }
            return types;
        }
    }
