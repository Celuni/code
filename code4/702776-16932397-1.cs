    /// <summary>
    /// Specifies that the class can be filterable
    /// </summary>
    interface IFilterable {
        /// <summary>
        /// Specifies the way the filtering will occur
        /// </summary>
        /// <param name="filter"></param>
        /// <returns></returns>
        bool FilterClause(string filter);
    }
   
    //partial class definition for PersonModel
    public partial class PersonModel: IFilterable{
        //entity properties (normaly these are generated by EF)
        public int Id { get; set; }
        public int OwningOrganisationID { get; set; }
        public string City { get; set; }
        public string CountryName { get; set; }
        public string Forename { get; set; }
        public string PersonTypeName { get; set; }
        public string Postcode { get; set; }
        public string Surname { get; set; }
       
        //Implementation of IFiltrable 
        public bool FilterClause(string filter) {
            return City.ToLower().Contains(filter)
                    || CountryName.ToLower().Contains(filter)
                    || Forename.ToLower().Contains(filter)
                    || PersonTypeName.ToLower().Contains(filter)
                    || Postcode.ToLower().Contains(filter)
                    || Surname.ToLower().Contains(filter);
        }
    }
    //partial class definition for OrganizationModel
    public partial class OrganizationModel: IFilterable{        
        //Implementation of IFiltrable 
        public bool FilterClause(string filter) {
            //replace 'true' with code that will apply filtering for the OrganizationModel class
            return  true;
        }
    }
