    using System.Reflection;
    using Expressions = System.Linq.Expressions;
    // See - http://stackoverflow.com/questions/2132791/reflecting-over-all-properties-of-an-interface-including-inherited-ones
    public static class ReflectionExtensions
    {
        public static PropertyInfo GetInterfaceProperty(this Type type, String propName, Type returnType)
        {
            if (propName == null)
                throw new ArgumentNullException("propName");
            if (returnType == null)
                throw new ArgumentNullException("propType");
            return type.GetInterfaces()
                .Select(parentInterface =>
                    parentInterface.GetProperty(propName, returnType))
                .Where(prop =>
                    prop != null)
                .Single();
        }
    }
    public static class CollectionPropertyDataGridBindingHelper
    {
        public static void RemoveAutoGeneratedColumns(this DataGrid dataGrid, String propertyName)
        {
            if (dataGrid == null)
                throw new ArgumentNullException("dataGrid");
            if (propertyName == null)
                throw new ArgumentNullException("propertyName");
            var autogeneratedColumns = dataGrid
                .Columns
                .OfType<DataGridBoundColumn>()
                .Where(col =>
                    (col.Binding as Binding).Path.Path.Equals(propertyName));
            foreach (var autoColumn in autogeneratedColumns)
            {
                dataGrid.Columns.Remove(autoColumn);
            }
        }
        public static void RegenerateColumns<TItem, TPropertyCollectionItem>(
            this DataGrid dataGrid,
            Expressions.Expression<Func<TItem, IEnumerable<TPropertyCollectionItem>>> propertyExpression, 
            IEnumerable<TItem> items)
        {
            RegenerateColumns<TItem, TPropertyCollectionItem>(dataGrid,
                propertyExpression,
                items,
                (index) =>
                    String.Format("Column - {0}", index));
        }
        public static void RegenerateColumns<TItem, TPropertyCollectionItem>(
            this DataGrid dataGrid, 
            Expressions.Expression<Func<TItem, IEnumerable<TPropertyCollectionItem>>> collectionPropertyExpression, 
            IEnumerable<TItem> items, 
            Func<Int32, String> formatHeader)
        {
            if (dataGrid == null)
                throw new ArgumentNullException("dataGrid");
            if (collectionPropertyExpression == null)
                throw new ArgumentNullException("propertyExpression");
            if (items == null)
                throw new ArgumentNullException("items");
            if (formatHeader == null)
                throw new ArgumentNullException("formatHeader");
            var collectionPropInfo = GetCollectionPropertyInfoFor<TItem, TPropertyCollectionItem>(collectionPropertyExpression);
            var propertyName = collectionPropInfo.Name;
            var getCount = GetCountGetter<TItem, TPropertyCollectionItem>(
                collectionPropertyExpression.Compile(),
                collectionPropInfo);
            // Remove old autocolumns
            dataGrid.RemoveAutoGeneratedColumns(propertyName);
            Int32 maxColumnsAdded = 0;
            // Create new columns
            foreach (var item in items)
            {
                GenerateColumnsForItem(dataGrid,
                    item,
                    getCount,
                    formatHeader,
                    propertyName,
                    ref maxColumnsAdded);
            }
        }
        private static void GenerateColumnsForItem<TItem>(DataGrid dataGrid, 
            TItem item, 
            Func<TItem, Int32> getCount,
            Func<Int32, String> formatHeader,
            String propertyName,
            ref Int32 maxColumnsAdded)
        {
            Int32 count = getCount(item);
            if (count <= maxColumnsAdded)
                return;
            for (int columnNumber = maxColumnsAdded; columnNumber < count; columnNumber++)
            {
                DataGridTextColumn column = new DataGridTextColumn()
                {
                    Header = formatHeader(columnNumber),
                    Binding = new Binding(String.Format("{0}[{1}]",
                        propertyName,
                        columnNumber))
                };
                dataGrid.Columns.Add(column);
            }
            maxColumnsAdded = count;
        }
        private static Func<TItem, Int32> GetCountGetter<TItem, TPropertyCollectionItem>(
            Func<TItem, IEnumerable<TPropertyCollectionItem>> getCollection,
            PropertyInfo propInfo)
        {
            if (getCollection == null)
                throw new ArgumentNullException("getCollection");
            if (propInfo == null)
                throw new ArgumentNullException("propInfo");
            var collectionType = propInfo.PropertyType;
            
            var countGetter = collectionType.GetInterfaceProperty("Count",
                typeof(Int32));
            if (countGetter != null)
            {
                return (item) =>
                    (Int32)countGetter.GetMethod.Invoke(getCollection(item), null);
            }
            throw new NotImplementedException("Not implemented: For simple IEnumerables the use of Enumerable.Count() method shall be considered.");
        }
        private static PropertyInfo GetCollectionPropertyInfoFor<TItem, TPropertyCollectionItem>(
            Expressions.Expression<Func<TItem, 
            IEnumerable<TPropertyCollectionItem>>> propertyExpression)
        {
            if (propertyExpression == null)
                throw new ArgumentNullException("propertyExpression");
            
            var memberExp = propertyExpression.Body as Expressions.MemberExpression;
            if (memberExp == null)
                throw new ArgumentNullException("propertyExpression");
            var propInfo = memberExp.Member as PropertyInfo;
            if (propInfo == null)
                throw new ArgumentNullException("propertyExpression");
            if (!propInfo.DeclaringType.IsAssignableFrom(typeof(TItem)))
                throw new ArgumentException("propertyExpression");
            
            return propInfo;
        }
    }
