    public class ExtendedListView : ListView
	{
		public static readonly DependencyProperty AutoColumnsProperty =
				   DependencyProperty.Register("AutoColumns", typeof(bool), typeof(ExtendedListView), new FrameworkPropertyMetadata(true, OnAutoColumnsPropertyChanged));
		protected override void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue)
		{
			base.OnItemsSourceChanged(oldValue, newValue);
			OnAutoColumnsPropertyChanged(this, new DependencyPropertyChangedEventArgs(AutoColumnsProperty, false, true));
		}
		private static void OnAutoColumnsPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
		{
			var newValue = (bool)e.NewValue;
			var dataGrid = (ExtendedListView)d;
			if (newValue)
			{
				dataGrid.AddAutoColumns();
			}
			else
			{
				dataGrid.DeleteAutoColumns();
			}			
		}
		Type GetBaseTypeOfEnumerable(IEnumerable enumerable)
		{
			if (enumerable == null)
			{
				return null;				
			}
			var genericEnumerableInterface = enumerable
				.GetType()
				.GetInterfaces().FirstOrDefault(i => i.GetGenericTypeDefinition() == typeof(IEnumerable<>));
			if (genericEnumerableInterface == null)
			{
				return null;
			}
			var elementType = genericEnumerableInterface.GetGenericArguments()[0];
			if (!elementType.IsGenericType)
			{
				return elementType;
			}
			return elementType.GetGenericTypeDefinition() == typeof(Nullable<>)
				? elementType.GetGenericArguments()[0]
				: elementType;
		}
		private readonly HashSet<GridViewColumn> autoGeneratedColumns = new HashSet<GridViewColumn>();
		private void AddAutoColumns()
		{
			var gridView = View as GridView;
			if (gridView == null)
			{
				throw new Exception("Not a grid view");
			}
			var itemType = GetBaseTypeOfEnumerable(ItemsSource);
			if (itemType == null)
			{
				throw new Exception("Could not resolve item type");
			}
			var properties = itemType.GetProperties();
			foreach (var property in properties)
			{
				var gridViewColumn = new GridViewColumn
				{
					CellTemplate = CreateTemplate(property.Name),
					Header = property.Name,
					Width = 100
				};
				gridView.Columns.Add(gridViewColumn);
				autoGeneratedColumns.Add(gridViewColumn);
			}			
		}
		private DataTemplate CreateTemplate(string path)
		{
			string xamlTemplate = string.Format("<DataTemplate><ContentPresenter Content=\"{{Binding {0}}}\" ContentTemplate=\"{{StaticResource GridViewTextCell}}\" /></DataTemplate>", path);
			var context = new ParserContext
			{
				XamlTypeMapper = new XamlTypeMapper(new string[0])
			};
			context.XmlnsDictionary.Add("", "http://schemas.microsoft.com/winfx/2006/xaml/presentation");
			context.XmlnsDictionary.Add("x", "http://schemas.microsoft.com/winfx/2006/xaml");
			var template = (DataTemplate)XamlReader.Parse(xamlTemplate, context);
			return template;
		}
	
		private void DeleteAutoColumns()
		{
			var gridView = View as GridView;
			if (gridView == null)
			{
				throw new Exception("Not a grid view");
			}
			
			for (int columnIndex = gridView.Columns.Count - 1; columnIndex >= 0; --columnIndex)
			{
				if (autoGeneratedColumns.Contains(gridView.Columns[columnIndex]))
				{
					gridView.Columns.RemoveAt(columnIndex);
				}
			}		
		}
		
		public bool AutoColumns
		{
			get { return (bool)GetValue(AutoColumnsProperty); }
			set { SetValue(AutoColumnsProperty, value); }
		}
	}
