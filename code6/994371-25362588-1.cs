    internal class AutoGeneratedFactoryInterceptor : IInterceptor
    {
        private readonly IUnityContainer _unityContainer;
        public AutoGeneratedFactoryInterceptor(IUnityContainer unityContainer)
        {
            _unityContainer = unityContainer;
        }
        public void Intercept(IInvocation invocation)
        {
            IEnumerable<ResolverOverride> resolverOverrides = DetermineResolverOverrides(invocation);
            Type typeToResolve = DetermineTypeToResolve(invocation.Method);
            
            invocation.ReturnValue = _unityContainer.Resolve(typeToResolve, resolverOverrides.ToArray());
        }
        private static Type DetermineTypeToResolve(MethodInfo method)
        {
            ResolveToAttribute resolveToAttribute = method.Attribute<ResolveToAttribute>();
            if (resolveToAttribute == null)
            {
                return method.ReturnType;
            }
            if (resolveToAttribute.ResolveTo.IsGenericTypeDefinition)
            {
                return resolveToAttribute.ResolveTo.MakeGenericType(method.GetGenericArguments());
            }
            
            return resolveToAttribute.ResolveTo;
        }
        private static IEnumerable<ResolverOverride> DetermineResolverOverrides(IInvocation invocation)
        {
            return invocation.Method.Parameters()
                .Select((parameterInfo, parameterIndex) => 
                    new ParameterOverride(parameterInfo.Name, invocation.Arguments[parameterIndex]));
        }
