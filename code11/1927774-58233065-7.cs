    using System.Diagnostics;
    using System.Linq;
    using System.Windows.Automation;
    using System.Windows.Forms;
    public partial class frmWindowWatcher : Form
    {
        AutomationEventHandler DialogButtonHandler = null;
        AutomationElement msgBoxButton = null;
        ElementWindow windowElement = null;
        int currentProcessId = 0;
        private string appProcessName = "theAppProcessName";
        //private string appWindowTitle = "theAppMainWindowTitle";
        public enum FindWindowMethod
        {
            ProcessName,
            Caption
        }
        public frmWindowWatcher()
        {
            InitializeComponent();
            using (var proc = Process.GetCurrentProcess()) {
                currentProcessId = proc.Id;
            }
            // Identify the application by its Process name...
            StartAppWatcher(appProcessName, FindWindowMethod.ProcessName);
            // ... or by its main Window Title
            //StartAppWatcher(appWindowTitle, FindWindowMethod.Caption);
        }
        protected override void OnFormClosed(FormClosedEventArgs e)
        {
            Automation.RemoveAllEventHandlers();
            base.OnFormClosed(e);
        }
        private void StartAppWatcher(string elementName, FindWindowMethod method)
        {
            windowElement = GetAppElement(elementName, method);
            // (...)
            // You may want to perform some actions if the watched application is already running when you start your app
            Automation.AddAutomationEventHandler(WindowPattern.WindowOpenedEvent, AutomationElement.RootElement,
                TreeScope.Subtree, (elm, e) => {
                    AutomationElement element = elm as AutomationElement;
                    try
                    {
                        if (element == null || element.Current.ProcessId == currentProcessId) return;
                        if (windowElement == null) windowElement = GetAppElement(elementName, method);
                        if (windowElement == null || windowElement.ProcessId != element.Current.ProcessId) return;
                        // If the Window is a MessageBox generated by the watched app, attach the handler
                        if (element.Current.ClassName == "#32770")
                        {
                            msgBoxButton = element.FindFirst(TreeScope.Descendants, 
                                new PropertyCondition(AutomationElement.NameProperty, "OK"));
                            if (msgBoxButton != null && msgBoxButton.GetSupportedPatterns().Any(p => p.Equals(InvokePattern.Pattern)))
                            {
                                Automation.AddAutomationEventHandler(
                                    InvokePattern.InvokedEvent, msgBoxButton, TreeScope.Element,
                                        DialogButtonHandler = new AutomationEventHandler(MessageBoxButtonHandler));
                            }
                        }
                    }
                    catch (ElementNotAvailableException) {
                        // Ignore: this exception may be raised if you show a modal dialog, 
                        // in your own app, that blocks the execution. When the dialog is closed, 
                        // AutomationElement element is no longer available
                    }
                });
            Automation.AddAutomationEventHandler(WindowPattern.WindowClosedEvent, AutomationElement.RootElement,
                TreeScope.Subtree, (elm, e) => {
                    AutomationElement element = elm as AutomationElement;
                    if (element == null || element.Current.ProcessId == currentProcessId || windowElement == null) return;
                    if (windowElement.ProcessId == element.Current.ProcessId) {
                        if (windowElement.MainWindowTitle == element.Current.Name) {
                            windowElement = null;
                        }
                    }
                });
        }
        private void MessageBoxButtonHandler(object sender, AutomationEventArgs e)
        {
            Console.WriteLine("Dialog Button clicked at : " + DateTime.Now.ToString());
            // (...)
            // Remove the handler after, since the next MessageBox needs a new handler.
            Automation.RemoveAutomationEventHandler(e.EventId, msgBoxButton, DialogButtonHandler);
        }
        private ElementWindow GetAppElement(string elementName, FindWindowMethod method)
        {
            Process proc = null;
            try {
                switch (method) {
                    case FindWindowMethod.ProcessName:
                        proc = Process.GetProcessesByName(elementName).FirstOrDefault();
                        break;
                    case FindWindowMethod.Caption:
                        proc = Process.GetProcesses().FirstOrDefault(p => p.MainWindowTitle == elementName);
                        break;
                }
                return CreateElementWindow(proc);
            }
            finally {
                proc?.Dispose();
            }
        }
        private ElementWindow CreateElementWindow(Process process) => 
            process == null ? null : new ElementWindow(process.ProcessName) {
                MainWindowTitle = process.MainWindowTitle,
                MainWindowHandle = process.MainWindowHandle,
                ProcessId = process.Id
            };
    }
