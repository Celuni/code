    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using MyNameSpace;
    //
    //    var event = Event.FromJson(jsonString);
    
    namespace MyNameSpace
    {
        using System;
        using System.Collections.Generic;
    
        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;
    
        public partial class EventClass
        {
            [JsonProperty("eventdate")]
            public DateTimeOffset Eventdate { get; set; }
    
            [JsonProperty("name")]
            public string Name { get; set; }
    
            [JsonProperty("url")]
            public string Url { get; set; }
    
            [JsonProperty("info")]
            public string Info { get; set; }
    
            [JsonProperty("showtime")]
            public object Showtime { get; set; }
    
            [JsonProperty("url_tix")]
            public string UrlTix { get; set; }
    
            [JsonProperty("event_owner")]
            public string EventOwner { get; set; }
    
            [JsonProperty("follow_url")]
            public string FollowUrl { get; set; }
    
            [JsonProperty("event_image")]
            public string EventImage { get; set; }
    
            [JsonProperty("venue")]
            public string Venue { get; set; }
    
            [JsonProperty("city")]
            public string City { get; set; }
    
            [JsonProperty("country")]
            public string Country { get; set; }
    
            [JsonProperty("state")]
            public string State { get; set; }
        }
    
        public partial struct EventUnion
        {
            public EventClass[] EventClassArray;
            public string String;
    
            public static implicit operator EventUnion(EventClass[] EventClassArray) => new EventUnion { EventClassArray = EventClassArray };
            public static implicit operator EventUnion(string String) => new EventUnion { String = String };
        }
    
        public class Event
        {
            public static EventUnion[] FromJson(string json) => JsonConvert.DeserializeObject<EventUnion[]>(json, MyNameSpace.Converter.Settings);
        }
    
        public static class Serialize
        {
            public static string ToJson(this EventUnion[] self) => JsonConvert.SerializeObject(self, MyNameSpace.Converter.Settings);
        }
    
        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
                {
                    EventUnionConverter.Singleton,
                    new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
                },
            };
        }
    
        internal class EventUnionConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(EventUnion) || t == typeof(EventUnion?);
    
            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                switch (reader.TokenType)
                {
                    case JsonToken.String:
                    case JsonToken.Date:
                        var stringValue = serializer.Deserialize<string>(reader);
                        return new EventUnion { String = stringValue };
                    case JsonToken.StartArray:
                        var arrayValue = serializer.Deserialize<EventClass[]>(reader);
                        return new EventUnion { EventClassArray = arrayValue };
                }
                throw new Exception("Cannot unmarshal type EventUnion");
            }
    
            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                var value = (EventUnion)untypedValue;
                if (value.String != null)
                {
                    serializer.Serialize(writer, value.String);
                    return;
                }
                if (value.EventClassArray != null)
                {
                    serializer.Serialize(writer, value.EventClassArray);
                    return;
                }
                throw new Exception("Cannot marshal type EventUnion");
            }
    
            public static readonly EventUnionConverter Singleton = new EventUnionConverter();
        }
    }
