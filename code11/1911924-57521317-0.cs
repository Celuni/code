csharp
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var crypto = Crypto.FromJson(jsonString);
namespace QuickType
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    public partial class Crypto
    {
        [JsonProperty("Meta Data")]
        public MetaData MetaData { get; set; }
        [JsonProperty("Time Series (Digital Currency Daily)")]
        public Dictionary<string, TimeSeriesDigitalCurrencyDaily> TimeSeriesDigitalCurrencyDaily { get; set; }
    }
    public partial class MetaData
    {
        [JsonProperty("1. Information")]
        public string The1Information { get; set; }
        [JsonProperty("2. Digital Currency Code")]
        public string The2DigitalCurrencyCode { get; set; }
        [JsonProperty("3. Digital Currency Name")]
        public string The3DigitalCurrencyName { get; set; }
        [JsonProperty("4. Market Code")]
        public string The4MarketCode { get; set; }
        [JsonProperty("5. Market Name")]
        public string The5MarketName { get; set; }
        [JsonProperty("6. Last Refreshed")]
        public string The6LastRefreshed { get; set; }
        [JsonProperty("7. Time Zone")]
        public string The7TimeZone { get; set; }
    }
    public partial class TimeSeriesDigitalCurrencyDaily
    {
        [JsonProperty("1a. open (CNY)")]
        public string The1AOpenCny { get; set; }
        [JsonProperty("1b. open (USD)")]
        public string The1BOpenUsd { get; set; }
        [JsonProperty("2a. high (CNY)")]
        public string The2AHighCny { get; set; }
        [JsonProperty("2b. high (USD)")]
        public string The2BHighUsd { get; set; }
        [JsonProperty("3a. low (CNY)")]
        public string The3ALowCny { get; set; }
        [JsonProperty("3b. low (USD)")]
        public string The3BLowUsd { get; set; }
        [JsonProperty("4a. close (CNY)")]
        public string The4ACloseCny { get; set; }
        [JsonProperty("4b. close (USD)")]
        public string The4BCloseUsd { get; set; }
        [JsonProperty("5. volume")]
        public string The5Volume { get; set; }
        [JsonProperty("6. market cap (USD)")]
        public string The6MarketCapUsd { get; set; }
    }
    public partial class Crypto
    {
        public static Crypto FromJson(string json) => JsonConvert.DeserializeObject<Crypto>(json, QuickType.Converter.Settings);
    }
    public static class Serialize
    {
        public static string ToJson(this Crypto self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }
    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
  [1]: https://app.quicktype.io/#l=cs&r=json2csharp
