lang:c#
public interface ApplicationSoap
{
    [System.ServiceModel.OperationContractAttribute(Action = "http://Application/GetAppVersion", ReplyAction = "*")]
    Task<ExtApp.GetAppVersionResponse> GetAppVersionAsync(ExtApp.GetAppVersionRequest request);
}
You use this as a dependency in a repository that could look like this:
lang:c#
public class Repository
{
    private readonly IApplicationSoap _client;
    public Repository(IApplicationSoap client) { _client = client; }
    public async Task<AppVersion> GetAppVersionAsync(int version)
    {
        var request = new GetAppVersionRequest(new GetAppVersionRequestBody(version));
        var response = await _client.GetAppVersionAsync(request);
        return new AppVersion 
        {
            Version = response.Body.Version,
            StartDate = response.Body.StartDate,
            EndDate = response.Body.EndDate
        };
    }
}
In this case you may want to test the code that converts your input to a request and the code that converts the response to your DTO. This is the only code that is *yours* (as opposed to not being generated by the tools). To do so you need to mock (in fact *stub*) the SOAP client contract in your Repository test and have it return the response you want:
lang:c#
[Fact]
public async Task GetAppVersionAsync()
{
    // arrange
    var client = new Mock<IApplicationSoap>(); // mock the interface, not the class!
    var result = new AppVersion
    { 
        Version = 1, 
        StartDate = DateTime.Parse("2010-01-01"),
        EndDate = DateTime.Parse("2015-12-31")
    };
    client.Setup(x => x.GetAppVersionAsync(It.IsAny<int>))
          .Returns(Task.FromResult(new GetAppVersionResponse(new GetAppVersionResponseBody(result))));
    var repository = new Repository(soapApp);
    // act
    var dto = await repository.GetAppVersionAsync(1);
    // assert (verify the DTO state)
    Assert.Equal(1, dto.VersionNumber);
    Assert.Equal(new DateTime(2010, 1, 1), dto.StartDate);
    Assert.Equal(new DateTime(2015, 12, 31), dto.EndDate);
}
However... just because you can do this it does not mean that you should.
