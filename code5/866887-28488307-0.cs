    public static class ForeignKeyBulkInsert
    {
        private const string GUID_COLUMN_NAME = "GUID_SURROGATE_KEY";
        public static string GetTableName<T>(this ObjectContext context) where T : class
        {
            string sql = context.CreateObjectSet<T>().ToTraceString();
            Regex regex = new Regex("FROM (?<table>.*) AS");
            Match match = regex.Match(sql);
            string table = match.Groups["table"].Value;
            return table;
        }
        public static void AddRange<TEntity>(this DbContext db, IEnumerable<TEntity> range, bool importForeignKeyIDs = false)
            where TEntity : class
        {
            Dictionary<Guid, TEntity> lookup = new Dictionary<Guid, TEntity>();
            var objectContext = ((IObjectContextAdapter)db).ObjectContext;
            var os = objectContext.CreateObjectSet<TEntity>();
            bool hasAutoGeneratedKey = os.EntitySet.ElementType.KeyProperties.Any();
            Type entityType = typeof(TEntity);
            if (importForeignKeyIDs)
            {
                var foreignKeyProperties = os.EntitySet.ElementType.NavigationProperties.Where(x => x.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One);
                foreach (var foreignKeyProperty in foreignKeyProperties)
                {
                    var foreignKeyIdProperty = foreignKeyProperty.GetDependentProperties().First();
                    var parentKeyProperty = foreignKeyProperty.ToEndMember.GetEntityType().KeyMembers.First();
                    PropertyInfo foreignKeyPropertyInfo = null;
                    Type parentType = null;
                    PropertyInfo parentKeyPropertyInfo = null;
                    PropertyInfo foreignKeyIdPropertyInfo = null;
                    foreach (var item in range)
                    {
                        entityType.GetProperty(foreignKeyProperty.Name).GetValue(item);
                        if (foreignKeyPropertyInfo == null)
                            foreignKeyPropertyInfo = entityType.GetProperty(foreignKeyProperty.Name);
                        if (parentType == null)
                            parentType = foreignKeyPropertyInfo.GetValue(item).GetType();
                        if (parentKeyPropertyInfo == null)
                            parentKeyPropertyInfo = parentType.GetProperty(parentKeyProperty.Name);
                        if (foreignKeyIdPropertyInfo == null)
                            foreignKeyIdPropertyInfo = entityType.GetProperty(foreignKeyIdProperty.Name);
                        var foreignKey = foreignKeyPropertyInfo.GetValue(item);
                        if (foreignKey == null)
                            break;
                        var parentKey = parentKeyPropertyInfo.GetValue(foreignKey);
                        foreignKeyIdPropertyInfo.SetValue(item, parentKey);
                    }
                }
            }
            string tableName = objectContext.GetTableName<TEntity>();
            var entityReader = range.AsDataReader(GUID_COLUMN_NAME, lookup);
            if (hasAutoGeneratedKey)
            {
                try
                {
                    db.Database.ExecuteSqlCommand(string.Format("ALTER TABLE {0} ADD [{1}] uniqueidentifier null", tableName, GUID_COLUMN_NAME));
                }
                catch (Exception)
                {
                    db.Database.ExecuteSqlCommand(string.Format("ALTER TABLE {0} DROP COLUMN [{1}]", tableName, GUID_COLUMN_NAME));
                    db.Database.ExecuteSqlCommand(string.Format("ALTER TABLE {0} ADD [{1}] uniqueidentifier null", tableName, GUID_COLUMN_NAME));
                }
            }
            try
            {
                var connection = db.Database.Connection as SqlConnection;
                connection.Open();
                using (SqlBulkCopy cpy = new SqlBulkCopy(connection))
                {
                    cpy.BulkCopyTimeout = 0;
                    cpy.DestinationTableName = tableName;
                    cpy.WriteToServer(entityReader);
                    connection.Close();
                }
                if (hasAutoGeneratedKey)
                {
                    db.Database.Connection.Open();
                    var comm = db.Database.Connection.CreateCommand();
                    comm.CommandText = string.Format("SELECT * FROM {0} WHERE [{1}] is not null", tableName, GUID_COLUMN_NAME);
                    try
                    {
                        using (var reader = comm.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                Guid surrogateKey = Guid.Parse(reader[GUID_COLUMN_NAME].ToString());
                                TEntity entity = lookup[surrogateKey];
                                var keyProperty = entityType.GetProperty(os.EntitySet.ElementType.KeyMembers.First().Name);
                                keyProperty.SetValue(entity, reader[keyProperty.Name]);
                            }
                        }
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                    finally
                    {
                        //This should never occur
                        db.Database.Connection.Close();
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (hasAutoGeneratedKey)
                    db.Database.ExecuteSqlCommand(string.Format("ALTER TABLE {0} DROP COLUMN [{1}]", tableName, GUID_COLUMN_NAME));
            }
        }
    }
