        public class PropertyDefinitionFiltering : Behavior<RadPropertyGrid>
        {
            private static RadPropertyGrid _PropertyGrid;
                   
            #region HiddenProperties
    
            private static string[] _HiddenProperties;
    
            public static readonly DependencyProperty HiddenPropertiesProperty =
                DependencyProperty.RegisterAttached("HiddenProperties", typeof(string[]),
                                                    typeof(PropertyDefinitionFiltering),
                                                    new PropertyMetadata(OnSetHiddenProperties));
    
            public static string[] GetHiddenProperties(DependencyObject obj)
            {
                return (string[])obj.GetValue(HiddenPropertiesProperty);
            }
    
            public static void SetHiddenProperties(DependencyObject obj, string[] value)
            {
                obj.SetValue(HiddenPropertiesProperty, value);
            }
    
            private static void OnSetHiddenProperties(DependencyObject d, DependencyPropertyChangedEventArgs e)
            {
                _HiddenProperties = (string[])e.NewValue;
    
                var propertyGrid = d as RadPropertyGrid;
    
                if (null == propertyGrid) return;
    
                _PropertyGrid = propertyGrid;
            }
    
            #endregion
    
            protected override void OnAttached()
            {
                base.OnAttached();
    
                AssociatedObject.Loaded -= OnLoaded;
                AssociatedObject.Loaded += OnLoaded;
    
                AssociatedObject.Unloaded -= OnUnloaded;
                AssociatedObject.Unloaded += OnUnloaded;
            }
    
            protected override void OnDetaching()
            {
                AssociatedObject.Loaded -= OnLoaded;
                
                OnUnloaded();
    
                base.OnDetaching();
            }
    
            protected void OnUnloaded(object sender, RoutedEventArgs eventArgs)
            {
                OnUnloaded();
            }
    
            protected void OnUnloaded()
            {
                _PropertyGrid.AutoGeneratingPropertyDefinition -= PropertyGridOnAutoGeneratingPropertyDefinition;
            }
    
            private void OnLoaded(object sender, RoutedEventArgs e)
            {
                _PropertyGrid = AssociatedObject;
                               
                _PropertyGrid.AutoGeneratingPropertyDefinition -= PropertyGridOnAutoGeneratingPropertyDefinition;
                _PropertyGrid.AutoGeneratingPropertyDefinition += PropertyGridOnAutoGeneratingPropertyDefinition;
            }
    
            private static void PropertyGridOnAutoGeneratingPropertyDefinition(object sender, AutoGeneratingPropertyDefinitionEventArgs eventArgs)
            {
                PropertyDefinition propertyDefinition = eventArgs.PropertyDefinition;
    
                string propertyName = propertyDefinition.SourceProperty.Name;
    
                if (Array.IndexOf(_HiddenProperties, propertyDefinition.AutoGeneratedPath) > 0)
                {
                    eventArgs.Cancel = true;
                }
                else
                {
                    var descriptor = ((MemberDescriptor)(propertyDefinition.SourceProperty.Descriptor));
    
                    /// Work with properties attribute, properties display name, etc
                }
            }
        }
