    // sample class
    public class Schedule
    {
        public DateTime week {get; set;}
        public int hours {get; set;}
    }
    // sample data
    var scheduleTable = new List<Schedule>();
    scheduleTable.Add(new Schedule() { week=new DateTime(2017,8,11), hours=20});
    scheduleTable.Add(new Schedule() { week=new DateTime(2017,8,11), hours=20});
    scheduleTable.Add(new Schedule() { week=new DateTime(2017,8,18), hours=30});
    // Sum all hours that fall on the same week.
    var summedSchedule = scheduleTable.GroupBy(
        x => x.week, 
        x => x.hours, 
        (key, g) => new Schedule() { week = key, hours = g.Sum() }
    );
    // Generate range of dates. You'll need to define the cut off point. Here,
    // 10 weeks of dates are generated by adding 7 days successively to the
    // starting date (the first date found from above)
    var dates = Enumerable.Range(1, 10).Select(x => scheduleTable.First().week.AddDays(7 * x));
    // Generate empty schedules, assigning zero hours to every week in the range.
    var zeroSchedules = dates.Select(x => new Schedule() { week = x, hours = 0 });
    // Pull out the dates for the weeks that have hours.
    var fullWeeks = summedSchedule.Where(x => x.hours > 0).Select(x => x.week);
    
    // Use the above list to pull out only the Schedule objects without hours.
    var emptyWeeks = zeroSchedules.Where(x => !fullWeeks.Contains(x.week));
    // The above list of zero-hour-weeks is then combined with the starting
    // (summed) list of weeks that have hours.
    var combined = new List<Schedule>();
    combined.AddRange(emptyWeeks);
    combined.AddRange(summedSchedule);
    combined = combined.OrderBy(x => x.week).ToList();
