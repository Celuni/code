    //----------------------
    // <auto-generated>
    //     Generated using the NJsonSchema v8.32.6319.16936 (http://NJsonSchema.org)
    // </auto-generated>
    //----------------------
    namespace JsonSchemaClassGenerator.TestSchema
    {
    #pragma warning disable // Disable all warnings
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.32.6319.16936")]
    public partial class TestSchema : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<object> _array = new System.Collections.ObjectModel.ObservableCollection<object>();
    
        [Newtonsoft.Json.JsonProperty("array", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<object> Array
        {
            get { return _array; }
            set 
            {
                if (_array != value)
                {
                    _array = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TestSchema FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TestSchema>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.32.6319.16936")]
    public partial class Object : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Object FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Object>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    }
