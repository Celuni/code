    using System;
    using System.Collections.Generic;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data;
    using System.Drawing;
    using System.Linq;
    using System.Text;
    using System.Windows.Forms;
    using System.Xml;
    using System.Xml.Linq;
    namespace WindowsFormsApplication4
    {
        public partial class Form1 : Form
        {
            const string INPUT_FILENAME = @"c:\temp\test.xml";
            const string OUTPUT_FILENAME = @"c:\temp\test1.xml";
            public Form1()
            {
                InitializeComponent();
                DataTable dt = new DataTable();
                dt.Columns.Add("StartTime", typeof(DateTime));
                dt.Columns.Add("EndTime", typeof(DateTime));
                dt.Columns.Add("WorkShift", typeof(string));
                dt.Columns.Add("WorkShiftModel", typeof(string));
                dt.Columns.Add("UtilizationCategory", typeof(string));
                dt.Columns.Add("UtilizationCategoryDetail", typeof(string));
                dt.Columns.Add("Remarks", typeof(string));
                dt.Columns.Add("OperatorPerson", typeof(string));
                dt.Columns.Add("IsAutogenerated", typeof(Boolean));
                dt.Columns.Add("UsedEquipmentTypes", typeof(string));
                dt.Columns.Add("Name", typeof(string));
                dt.Columns.Add("Value", typeof(string));
                XDocument doc = XDocument.Load(INPUT_FILENAME);
                XNamespace ns = null;
                foreach (XElement timeSlot in doc.Descendants("TimeSlot"))
                {
                    foreach (XElement nameValuePair in timeSlot.Descendants().Where(x => x.Name.LocalName == "NameValuePair"))
                    {
                        DataRow newRow = dt.Rows.Add();
                        ns = nameValuePair.GetDefaultNamespace();
                        newRow["StartTime"] = (DateTime)timeSlot.Element(ns + "StartTime");
                        newRow["EndTime"] = (DateTime)timeSlot.Element(ns + "EndTime");
                        newRow["WorkShift"] = (string)timeSlot.Element(ns + "WorkShift");
                        newRow["WorkShiftModel"] = (string)timeSlot.Element(ns + "WorkShiftModel");
                        newRow["UtilizationCategory"] = (string)timeSlot.Element(ns + "UtilizationCategory");
                        newRow["UtilizationCategoryDetail"] = (string)timeSlot.Element(ns + "UtilizationCategoryDetail");
                        newRow["Remarks"] = (string)timeSlot.Element(ns + "Remarks");
                        newRow["OperatorPerson"] = (string)timeSlot.Element(ns + "OperatorPerson");
                        newRow["IsAutoGenerated"] = (Boolean)timeSlot.Element(ns + "IsAutoGenerated");
                        newRow["UsedEquipmentTypes"] = (string)timeSlot.Element(ns + "UsedEquipmentTypes");
                        newRow["Name"] = (string)nameValuePair.Element(ns + "Name");
                        newRow["Value"] = (string)nameValuePair.Element(ns + "Value");
                    }
                }
                dataGridView1.DataSource = dt;
                string root = doc.Root.Name.LocalName;
                string xmlIdentification = string.Format("<?xml version=\"1.0\" encoding=\"iso-8859-1\"?><{0}><TimeSlots></TimeSlots></{0}>", root);
                XDocument outputDoc = XDocument.Parse(xmlIdentification);
                XElement timeSlots = outputDoc.Descendants("TimeSlots").FirstOrDefault();
                var groups = dt.AsEnumerable().GroupBy(x => new
                {
                    starttime = x.Field<DateTime>("StartTime"),
                    endtime = x.Field<DateTime>("EndTime"),
                    workShiftModel = x.Field<string>("WorkShiftModel"),
                    utilizationCategory = x.Field<string>("UtilizationCategory"),
                    utilizationCategoryDetail = x.Field<string>("UtilizationCategoryDetail"),
                    remarks = x.Field<string>("Remarks"),
                    operationPerson = x.Field<string>("OperatorPerson"),
                    isAutoGenerated = x.Field<Boolean>("IsAutogenerated"),
                    userEquipmentTypes = x.Field<string>("UsedEquipmentTypes")
                }).ToList();
                foreach (var group in groups)
                {
                    XElement timeSlot = new XElement("TimeSlot");
                    timeSlots.Add(timeSlot);
                    timeSlot.Add(new XElement("StartTime", new object[] {new XAttribute(XNamespace.Xmlns + "TEST", "TEST"), group.Key.starttime}));
                    timeSlot.Add(new XElement("EndTimeTime", new object[] {new XAttribute(XNamespace.Xmlns + "TEST", "TEST"),group.Key.endtime}));
                    timeSlot.Add(new XElement("WorkShiftModel", new object[] {new XAttribute(XNamespace.Xmlns + "TEST", "TEST"), group.Key.workShiftModel}));
                    timeSlot.Add(new XElement("UtilizationCategory", new object[] {new XAttribute(XNamespace.Xmlns + "TEST", "TEST"), group.Key.utilizationCategory}));
                    timeSlot.Add(new XElement("UtilizationCategoryDetail", new object[] {new XAttribute(XNamespace.Xmlns + "TEST", "TEST"), group.Key.utilizationCategoryDetail}));
                    timeSlot.Add(new XElement("Remarks", new object[] {new XAttribute(XNamespace.Xmlns + "TEST", "TEST"), group.Key.remarks}));
                    timeSlot.Add(new XElement("OperatorPerson", new object[] {new XAttribute(XNamespace.Xmlns + "TEST", "TEST"), group.Key.operationPerson}));
                    timeSlot.Add(new XElement("IsAutogenerated", new object[] {new XAttribute(XNamespace.Xmlns + "TEST", "TEST"), group.Key.isAutoGenerated}));
                    timeSlot.Add(new XElement("UsedEquipmentTypes", new object[] {new XAttribute(XNamespace.Xmlns + "TEST", "TEST"), group.Key.userEquipmentTypes}));
                    timeSlot.Add(new XElement("NameValuePairs"));
                    XElement nameValuePairs = timeSlot.Element("NameValuePairs");
                    foreach (DataRow row in group)
                    {
                        nameValuePairs.Add(new XElement("NameValuePair", new object[] {
                            new XElement("Name", new object[] {new XAttribute(XNamespace.Xmlns + "TEST", "TEST"),row.Field<string>("Name")}),
                            new XElement("Value", new object[] {new XAttribute(XNamespace.Xmlns + "TEST", "TEST"),row.Field<string>("Value")}),
                        }));
                    }
                }
                outputDoc.Save(OUTPUT_FILENAME);
                
            }
        }
    }
