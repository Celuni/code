    /// <summary>
    /// Interaction logic for UniCollectionPropertyGrid.xaml
    /// </summary>
    public partial class UniCollectionPropertyGrid : UserControl
    {
        private static Logger logger = LogManager.GetCurrentClassLogger();
        // C-tor
        public UniCollectionPropertyGrid()
        {
            InitializeComponent();
        }
        /// <summary>
        /// Called when user clicks add item button: {+}
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void AddItem(object sender, RoutedEventArgs e)
        {
            if (this.DataContext is SomeDataContextClass)
            {
                SomeDataContextClass dataCtx = (this.DataContext as SomeDataContextClass);
                dynamic newItem = null;
                // What is being currenlty edited (this was unfortunatelly "impossible?" to pass dynamically. 
                // (Why ? Because by this time, Telerik & WPF neither seem to provide no mechanism to distinguish generic controls like this one, generated by editor template (factory) ...)
                switch (MainWindow.EditedPropertyName)
                {
                    case "Property1":
                        newItem = new Property1Type();
                        dataCtx.Property1_List.Add(newItem as Property1Type);
                        TheListOfItems.ItemsSource = dataCtx.Property1_List;
                        break;
                    case "Property2":
                        newItem = new Property2Type();
                        dataCtx.Property2_List.Add(newItem as Property2Type);
                        TheListOfItems.ItemsSource = dataCtx.Property2_List;
                        break;
                }
                // Set the newly added item as selected
                TheListOfItems.SelectedItem = newItem;
                // SetBinding it to property grid to be rendered
                ThePropertyGrid.Item = newItem;                
            }
        }
        /// <summary>
        /// Called when user clicks remove item button: {-}
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void RemoveItem(object sender, RoutedEventArgs e)
        {
            // Leave right away if no item is selected
            if (TheListOfItems.SelectedItem == null) return;
            if (this.DataContext is SomeDataContextClass)
            {
                SomeDataContextClass dataCtx = (this.DataContext as SomeDataContextClass);
                switch (MainWindow.EditedPropertyName)
                {
                    case "Property1":
                        dataCtx.Property1_List.Remove(TheListOfItems.SelectedItem as Property1Type);
                        break;
                    case "Property2":
                        dataCtx.Property2_List.Remove(TheListOfItems.SelectedItem as Property2Type);
                        break;
                }
            }
            // Nothing to show on property grid
            ThePropertyGrid.Item = null;
        }
        /// <summary>
        /// Called when user clicks Redraw property grid button: {R}
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void RedrawPropGrid(object sender, RoutedEventArgs e)
        {
            // This redraws, however closes all opened elements in property grid
            ThePropertyGrid.Item = null;
            ThePropertyGrid.Item = TheListOfItems.SelectedItem;
        }
        
        // ------------------------------------------------------------------------------------------------
        #region LIST_OF_ITEMS_EVENT_HANDLERS
        /// <summary>
        /// Fired, when user clicks on any item of the ListOfItems table (RadGridView).
        /// Is used to set selected item to the property grid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ListOfItems_SelectionChanged(object sender, Telerik.Windows.Controls.SelectionChangeEventArgs e)
        {
            // Try to redraw - wonder if this works
            // this.Arrange(new Rect(RenderSize));
            // this.UpdateLayout();
            ThePropertyGrid.Item = this.TheListOfItems.SelectedItem;
            // Prevent further traveling down the GUI hierarchy
            e.Handled = true;
        }
        /// <summary>
        /// Fired, when ListOfItem is started (loaded)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ListOfItems_Loaded(object sender, RoutedEventArgs e)
        {
            if (this.DataContext is SomeDataContextClass)
            {
                SomeDataContextClass dataCtx = (this.DataContext as SomeDataContextClass);
                switch (MainWindow.EditedPropertyName)
                {
                    case "Property1":
                        TheListOfItems.ItemsSource = dataCtx.Property1_List;
                        break;
                    case "Property2":
                        TheListOfItems.ItemsSource = dataCtx.Property2_List;
                        break;
                }
                
            }
        }
        #endregion LIST_OF_ITEMS_EVENT_HANDLERS
        // ------------------------------------------------------------------------------------------------
        #region PROPERTY_GRID_EVENT_HANDLERS
        /// <summary>
        /// Here you can hide whatever is unwanted, or otherwise control look of properties
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void PropertyGrid_AutoGeneratingPropertyDefinition(object sender, Telerik.Windows.Controls.Data.PropertyGrid.AutoGeneratingPropertyDefinitionEventArgs e)
        {
            try
            {
                string dispName = e.PropertyDefinition.DisplayName;
                dynamic parentValue = e.PropertyDefinition.ParentProperty?.Value;
                // Unfortunatelly e.PropertyDefinition.Value is null, so we can't switch by object type
                switch (dispName)
                {
                    case "Item":
                    case "ItemElementName":
                        e.PropertyDefinition.Visibility = Visibility.Collapsed; // Filter out Item
                        break;
                    case "SomeOtherProperty":
                        e.PropertyDefinition.Visibility = ((parentValue?.RangeType as ItemChoiceType?) == ItemChoiceType.choiceOne) ? Visibility.Visible : Visibility.Collapsed;
                        break;                   
                }
            }
            catch (Exception ex)
            {
                logger.Error("Problem occured when generating properties of the parent value: {1}  \nReason: {2}", e.PropertyDefinition.ParentProperty?.Value, ex.Message);
            }
        }
        /// <summary>
        /// Fired, when user clicks on any RadPropertyGrid element.
        /// Is used to define specific actions based on which property is selected
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void PropertyGrid_SelectionChanged(object sender, Telerik.Windows.Controls.SelectionChangeEventArgs e)
        {
			// Do something, like RedrawWholeControl();
            // Prevent further traveling down the GUI hierarchy
            e.Handled = true;
        }
        
        /// <summary>
        /// Event handler when (Segment, Template, or Node) Rad Property Grid cell was edited and just commited to be stored in element property.
        /// Enables different handling of various edited elements (cells)
        /// So far as example a segment length cell is filtered and handled (invoked setting of graphical rail widget length)
        /// This can be used to perform validation of input values (for example)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void PropertyGrid_CellEditEnded(object sender, Telerik.Windows.Controls.Data.PropertyGrid.PropertyGridEditEndedEventArgs e)
        {
            string editedPropertyName = null;
            if (sender is Telerik.Windows.Controls.RadPropertyGrid)
            {
                // Find out what property was actually edited
                Telerik.Windows.Controls.RadPropertyGrid rpg = (sender as Telerik.Windows.Controls.RadPropertyGrid);
                editedPropertyName = rpg.SelectedPropertyDefinition.DisplayName;
                // Prevent further traveling down the GUI hierarchy
                e.Handled = true;
            }
            // This redraws, however closes all opened elements in property grid
            ThePropertyGrid.Item = null;
            ThePropertyGrid.Item = TheListOfItems.SelectedItem;
        }
        #endregion PROPERTY_GRID_EVENT_HANDLERS
    }
