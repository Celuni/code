    using System;
    using System.Collections.Generic;
    
    namespace ProbabilityDistribution1
    {
    
        class Program
        {
    
            // This derived class converts the uniformly distributed random 
            // numbers generated by base.Sample( ) to another distribution.
            class RandomProportional : Random
            {
                // The Sample method generates a distribution more concentrated around the 0, in the range [0.0, 1.0].
                protected override double Sample()
                {
                    double BSample = base.Sample();
                    const double concentrationAroundInputs = 5;//more concentrated when greater
                    double result = Math.Pow(BSample, concentrationAroundInputs);
                    return result;
                }
    
            }
    
            static double XCoordinateOfRandomUnitInsideSphere(Random aRandom)
            {
                //Even with uniform distribution the probability of exiting is greater than 0.5 on each iteration
                while (true) 
                {
                    double x = aRandom.NextDouble();
                    double y = aRandom.NextDouble();
                    double z = aRandom.NextDouble();
                    if ((x * x + y * y + z * z) < 1) //inside the sphere
                    {
                        return x;
                    }
                }
    
            }
    
            static void TestDistribution()
            {
    
                double[] Input = { 1, 16, 19, 21 };
                List<int> sampleValues = new List<int>();
                Random aRandom = new Random();
                RandomProportional aRandomProportinal = new RandomProportional();
    
                for (int i = 0; i < 100; i++)
                {
                    int value = 0;
                    do
                    {
                        int indexChosen = aRandom.Next(4);
                        double xCoordinate = XCoordinateOfRandomUnitInsideSphere(aRandomProportinal);
    
                        if (aRandom.Next(2)==0)
                        {
                            xCoordinate = -xCoordinate;
                        }
                        double xRandomResult = xCoordinate * 64;
                        value = (int)(Input[indexChosen] + xRandomResult);
                    } while (value < 1 || value > 64);
                    sampleValues.Add((int)value);
                }
                sampleValues.Sort();
                Console.WriteLine();
                foreach (int i in sampleValues)
                {
                    Console.Write(" {0:00} ", i);
                }
                Console.WriteLine();
            }
    
    
    
            static void Main(string[] args)
            {
                TestDistribution();
                Console.WriteLine("end");
                Console.ReadLine();
    
            }
        }
    
    
    }
