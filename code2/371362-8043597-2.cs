	public static class Lights
	{
		public static byte[] Encode(string input)
		{
			// Convert to ASCII values, get the map, and flatten it:
			return input.ToUpper().SelectMany(a => map[a-65]).ToArray();
		}
		
		// Note: C# does not have Binary Literals, so here's an alternative:
		private const byte B0000000 = 0, B0000001 = 1, B0000010 = 2, B0000011 = 3, B0000100 = 4; // ETC...
		// For the demo:
		private const byte B1111111 = 127, B1001001 = 73, B0110110 = 102, B0111110 = 126, B1000001 = 129;
			
		// Create the map:
		private static byte[][] map = new []{
						/* A */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* B */ new[]{ B1111111, B1001001, B1001001, B0110110, B0000000 },
						/* C */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* D */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* E */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* F */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* G */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* H */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* I */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* J */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* K */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* L */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* M */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* N */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* O */ new[]{ B0111110, B1000001, B1000001, B0111110, B0000000 },
						/* P */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* Q */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* R */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* S */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* T */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* U */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* V */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* W */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* X */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* Y */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
						/* Z */ new[]{ B0000000, B0000000, B0000000, B0000000, B0000000 },
					};
	}
