    foreach (var entry in this.ChangeTracker.Entries())
    	{
    		// Make sure that this customized save changes executes only for entities that
    		// inherit from our base entity (IEntity)
    		var entity = (entry.Entity as JEntity);
    		if (entity == null) continue;
     
    		switch (entry.State)
    		{
    			// In case entity is added, we need to set OriginalId AFTER it was saved to
    			// database, as Id is generated by database and cannot be known in advance.
    			// That is why we save reference to this object into insertedList and update
    			// original id after object was saved.
    			case System.Data.EntityState.Added:
    				entity.UserCreated = user;
    				entity.DateCreated = now;
    				insertedList.Add(entity);
    				break;
     
    			// Deleted entity should only be marked as deleted.
    			case System.Data.EntityState.Deleted:
    				if (!entity.IsActive(now))
    				{
    					invalidList.Add(entity);
    					continue;
    				}
    				entry.Reload();
    				entity.DateDeleted = now;
    				entity.UserDeleted = user;
    				break;
     
    			case System.Data.EntityState.Detached:
    				break;
     
    			case System.Data.EntityState.Modified:
    				if (!entity.IsActive(now))
    				{
    					invalidList.Add(entity);
    					continue;
    				}
    				entity.UserCreated = user;
    				entity.DateCreated = now;
     
    				JEntity newVersion = this.Set(entity.GetType()).Create(entity.GetType()) as JEntity;
    				newVersion = this.Set(entity.GetType()).Add(newVersion) as JEntity;
    				this.Entry(newVersion).CurrentValues.SetValues(entity);
     
    				this.Entry(entity).Reload();
     
    				entity.DateDeleted = newVersion.DateCreated;
    				entity.UserDeleted = user;
    				break;
    			case System.Data.EntityState.Unchanged:
    				break;
    			default:
    				break;
    		}
    	}
