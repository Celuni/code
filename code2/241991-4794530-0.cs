    [Serializable()]
    public abstract class BaseDataManager : IDisposable
    {
        private bool _disposedValue = false;
        private SqlConnection _connectionObject = null;
        public BaseDataManager()
        {
        }
        public BaseDataManager(string connectionString)
        {
            this.SqlConnectionString = connectionString;
        }
        public BaseDataManager(string connectionString, string username, string password)
        {
            if (!connectionString.EndsWith(";")) connectionString += ";";
            this.SqlConnectionString += "User ID=" + username + ";password=" + password;
        }
        public string SqlConnectionString
        {
            get;
            set;
        }
        public virtual SqlConnection Connection
        {
            get
            {
                if (_connectionObject == null && !String.IsNullOrEmpty(this.SqlConnectionString))
                    _connectionObject = new SqlConnection(this.SqlConnectionString);
                return _connectionObject;
            }
            set
            {
                _connectionObject = value;
            }
        }
        #region IDisposable Support
        /// <summary>
        /// (Protected) Method that performs actual cleanup on dispose. This interface
        /// has been implemented to clean up data connections that are left stranded
        /// when the class is disposed while the connection possibly remains open in
        /// the connection pool. This opportunity is also used to free up the private
        /// variables of the class.
        /// </summary>
        /// <param name="disposing">Used for explicitly calling Dispose</param>
        protected virtual void Dispose(bool disposing)
        {
            if (!_disposedValue)
            {
                if (disposing)
                {
                    //---------------------------------------------------------------------------------------------
                    // Close the connection object prior to setting it to nothing
                    //---------------------------------------------------------------------------------------------
                    if (_connectionObject != null) _connectionObject.Close();
                    _connectionObject = null;
                }
                _disposedValue = true;
            }
        }
        /// <summary>
        /// (Public) Method that implements IDisposable. This code is autogenerated 
        /// the implementation interface in the VS IDE. Do not change this code.
        /// </summary>
        public void Dispose()
        {
            // Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
            Dispose(true);
            GC.SuppressFinalize(this);
        }
        #endregion
    }
